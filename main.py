
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from search_download_pdf import search_download
import arxiv
from preprocc_pdf import PromptTranslatorEnRu, read_file_pdf, append_full_text, en_pdf_to_ru_txt
from GigaChat_module import txt_to_summary, reading_txt_giga

TOKEN = '7059633748:AAExQg88Pgn-E5b5y4XB3CinT-a4KPHc2BI'
bot = TeleBot(TOKEN)
translator = PromptTranslatorEnRu()

from langchain.chat_models.gigachat import GigaChat
from langchain.chains import RetrievalQA
orig_token = "NTlkY2MyZmItM2Q4ZC00ZWMzLWE2NjAtNTI3MzZhOTk2ZjQzOjVhZGJiZDQxLTc0YjAtNDQxNi04YjAzLTUxZDVmYTY4NTkwNw=="

llm = GigaChat(credentials=orig_token, scope="GIGACHAT_API_CORP",verify_ssl_certs=False,model="GigaChat-Pro")


user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_name_find = {}
user_count_find = {}
user_finded_result = {}
user_qa_db = {}
user_qa_db_chain = {}


main_text = '''üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI Agent DeepHack, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å, —á–∏—Ç–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏. üöÄ
–Ø –º–æ–≥—É —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–ª–æ–∂–Ω—ã–º –Ω–∞—É—á–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º, –æ–±–æ–±—â–∞—è –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ç–µ–π –∏ –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ. –¢—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ –º–µ–Ω—è –≤ –ø–æ–∏—Å–∫–µ –Ω–∞—É—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º —Ç–µ–±—è –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
üåç –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫. –ù–∞–ø—Ä–∏–º–µ—Ä: "–êrtificial intelligence in medicine" (–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω–µ).'''

sec_text = '–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?'

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_states[user_id] = 'waiting_main_text'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è main_text
    bot.send_message(chat_id=message.chat.id, text=main_text)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_main_text')
def handle_main_text(message):
    user_id = message.from_user.id
    user_states[user_id] = 'waiting_sec_text'  # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ main_text –æ–∂–∏–¥–∞–µ—Ç—Å—è sec_text
    user_name_find[user_id] = message.text
    print(user_name_find)
    bot.send_message(chat_id=message.chat.id, text=sec_text, reply_markup=create_keyboard())



@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_sort_text')
def handle_sort_text(message):
    user_id = message.from_user.id
   
    string_find = f"–ò—â—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É: {user_name_find[message.from_user.id]}"
    bot.send_message(chat_id=message.chat.id, text = string_find)


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'qa_model')
def qa_model(message):
    user_id = message.from_user.id
    
    print("Start qa")
    print(message.text)

    if user_id in user_qa_db:

        db = user_qa_db[user_id]
        #docs = db.similarity_search(message.text,k=100)
        #qa_chain = RetrievalQA.from_chain_type(llm, retriever=db.as_retriever())

        qa_chain = user_qa_db_chain[user_id] 
        #result
        answer = qa_chain({"query": message.text})['result']
        #print()
        bot.send_message(chat_id=message.chat.id, text = answer)





@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_sec_text')
def handle_sec_text(message):
    user_id = message.from_user.id
    print(user_id)
    —Åount = message.text
    user_states[user_id] = 'waiting_sort_text'
    user_count_find[user_id] = int(—Åount)


    inline_markup = InlineKeyboardMarkup()
    buttons = [
        InlineKeyboardButton("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å ", callback_data=f"{user_id}/button1/"),
        InlineKeyboardButton("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data=f"{user_id}/button2/")
    ]
    inline_markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(chat_id=message.chat.id, 
                     text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É:', 
                     reply_markup=inline_markup)
    
#–û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ü–û–î –¢–ï–ö–°–¢–û–ú    
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    data = call.data
    
    
    data_splitter = data.split("/")
    user_id = int(data_splitter[0])
    #print(user_id)



    if call.message:

        count = int(user_count_find[user_id])
        print(count)
        name_paper = user_name_find[user_id]
        print(name_paper)

        if data_splitter[1] == "v2":
            res = user_finded_result[user_id]
            index = int(data_splitter[2])
            article = res[index - 1]
            print(article)
            path_pdf = article['path_pdf']
            title = article['title']
        
            text_start_summary = f"üìò–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –°–µ–π—á–∞—Å —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ —Å—Ç–∞—Ç—å–∏ {title} –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã. –î–∞–π –º–Ω–µ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!\n\n"
            bot.send_message(chat_id=call.message.chat.id, text=text_start_summary)

            path_txt = en_pdf_to_ru_txt(path_pdf)

            summary = txt_to_summary(path_txt)

            bot.send_message(chat_id=call.message.chat.id, text=summary+"\n\n")

            bot.send_message(chat_id=call.message.chat.id, text = "üè• –ï—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π c—Ç–∞—Ç—å–∏?")

            user_states[user_id] = 'qa_model'
            db = reading_txt_giga(path_txt)
            qa_chain = RetrievalQA.from_chain_type(llm, retriever=db.as_retriever())
            user_qa_db[user_id] = db
            user_qa_db_chain[user_id] = qa_chain
            return

        text_start_find = "üîç –ü–æ–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å! –°–µ–π—á–∞—Å —è –Ω–∞–π–¥—É —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –∏ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ"
        if data_splitter[1] == 'button1':
            #bot.send_message(chat_id=call.message.chat.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å.')
            #SortCriterion.Relevance
            bot.send_message(chat_id=call.message.chat.id, text=text_start_find)
            res = search_download("./h1", name_paper, count, arxiv.SortCriterion.Relevance)
            print(res)
            
        elif data_splitter[1] == 'button2':
            #bot.send_message(chat_id=call.message.chat.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.')
            bot.send_message(chat_id=call.message.chat.id, text=text_start_find)
            res = search_download("./h1", name_paper, count, arxiv.SortCriterion.Relevance)
            print(res)
            #SortCriterion.SubmittedDate

    
    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π
    for index, article in enumerate(res, start=1):
        if index <= user_count_find[user_id] <= len(res):
            url = article['link_paper']
            title = article['title']
            path_pdf = article['path_pdf']
            #path_txt = en_pdf_to_ru_txt(path_pdf)
            #summary = txt_to_summary(path_txt)


            button_text = f"–°—Ç–∞—Ç—å—è {index}: {title[:30]}" if len(title) > 30 else f"–°—Ç–∞—Ç—å—è {index}: {title}"

            
            
            # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Å—ã–ª–∫–∏
            inline_markup = InlineKeyboardMarkup()
            inline_button = InlineKeyboardButton(button_text,  callback_data=f"{user_id}/v2/{index}")
            inline_markup.add(inline_button)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Å—Å—ã–ª–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
            bot.send_message(chat_id=call.message.chat.id, text=url)
            bot.send_message(chat_id=call.message.chat.id, text=title, reply_markup=inline_markup)

    bot.send_message(chat_id=call.message.chat.id, text="üëÄ –ù–∞–∂–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—é —Å—Ç–∞—Ç—å—é –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    user_finded_result[user_id] = res
    
    return


    for paper_info in res:

        path_pdf = paper_info['path_pdf']
        
        path_txt = en_pdf_to_ru_txt(path_pdf)

        
        #res = txt_to_summary(path_txt)
        #bot.send_message(chat_id=call.message.chat.id, text= res)

        #res = reading_txt_giga(path_txt)
        break

    #print(user_name_find[user_id])
    bot.send_message(chat_id=call.message.chat.id, text= f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_count_find[user_id]}\n–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é { user_name_find[user_id]}')



    



def create_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(1, 11):
        markup.add(KeyboardButton(str(i)))
    return markup

bot.polling()
#if __name__ == "__name__":

    